import { addPrototype } from '../utils'

export { }

declare global {
  interface Object {
    map(fn: (value: any, key: string | number, object: object) => any): object
  }
}

/**
 * Creates an object with the same keys as the provided object and values generated by running the provided function for each value
 * @memberof Object.prototype
 * @param {function} fn
 * @returns {Object}
 * @example
 * const users = {
 *   fred: { user: 'fred', age: 40 },
 *   pebbles: { user: 'pebbles', age: 1 }
 * };
 * users.map(u => u.age); // { fred: 40, pebbles: 1 }
 */
function map(this: { [key: string]: any }, fn: (value: any, key: string | number, object: object) => any): object {
  return Object.keys(this).reduce((acc: { [key: string]: any }, k) => {
    acc[k] = fn(this[k], k, this)

    return acc
  }, {})
}

addPrototype('map', map)
